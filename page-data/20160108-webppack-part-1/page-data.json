{"componentChunkName":"component---src-templates-blog-post-js","path":"/20160108-webppack-part-1/","result":{"data":{"site":{"siteMetadata":{"title":"Tech blog"}},"markdownRemark":{"id":"df3f557a-50b7-5198-abef-f5bf36e13340","excerpt":"为什么要用Webpack？它是什么？ 随着nodejs的迅猛发展，javascript不断进化，且逐渐变成服务器端开发的主流，而在前端领域它能做的事情也越来越多。可是，不断增多的js代码管理起来却让人头疼，模块化是唯一的解决办法，常见的做法是将不同功能的js…","html":"<h3>为什么要用Webpack？它是什么？</h3>\n<p>随着nodejs的迅猛发展，javascript不断进化，且逐渐变成服务器端开发的主流，而在前端领域它能做的事情也越来越多。可是，不断增多的js代码管理起来却让人头疼，模块化是唯一的解决办法，常见的做法是将不同功能的js分割作为单独模块。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;script src=&quot;module1.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;module2.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;module3.js&quot;&gt;&lt;/script&gt;`</code></pre></div>\n<p>但这种做法有几点问题：</p>\n<ol>\n<li>全局变量可能冲突</li>\n<li>加载顺序无法保证</li>\n<li>模块之间可能存在依赖</li>\n<li>在大项目里，模块过多难以管理</li>\n</ol>\n<p>在nodejs领域，通过CommonJS规范和AMD，这些问题得到了解决。所谓CommonJS，简单来说就是可用关键字require加载模块：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = require(&#39;foo&#39;);</code></pre></div>\n<p>这种加载方式是同步的，在浏览器常常需异步加载，这时就涉及到了AMD的异步加载方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">require([&quot;module&quot;, &quot;../file&quot;], function(module, file) { /* ... */ });\n\ndefine(&quot;mymodule&quot;, [&quot;dep1&quot;, &quot;dep2&quot;], function(d1, d2) {\n  return someExportedValue;\n});</code></pre></div>\n<p>这解决了异步但不可避免的让代码更难阅读和维护。除此之外，随着ECMAScript6的推行，它也带来自己的模块加载方式，让模块加载这件事变的更加复杂。</p>\n<p>Webpack是一个模块化管理系统，使用它的好处有以下三点：</p>\n<ol>\n<li>它可以统一模块的加载方式给开发者带来便捷。</li>\n<li>它可以利用已存在的nodejs模块，将其应用到浏览器前端。</li>\n<li>除了javascript，它可以模块化web前端相关的一切元素，图片，css，html等等。</li>\n</ol>\n<h3>用webpack创建项目</h3>\n<p>首先，你需要用nodejs来安装webpack，假如对nodejs不熟悉也没有关系，将其当作是一个安装工具，常用的命令也不过3句。下载nodejs并安装后，在一个文件目录下执行如下命令，用来初始化项目。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm init</code></pre></div>\n<p>之后，运行下面命令安装webpack，命令后的-g，表示将其安装为全局模块：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install webpack -g</code></pre></div>\n<p>这时可用编辑器（Atom或VsCode）打开该项目，添加以下两个文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 添加 entry.js\ndocuemnt.write(&quot;It works&quot;).</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 添加 index.html\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>接着执行一下命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">webpack ./entry.js bundle.js</code></pre></div>\n<p>这时用浏览器打开index.html文件，你能看到”It works”显示在页面上。\n<img src=\"http://7xtbg7.com2.z0.glb.clouddn.com/webpack1-1\"></p>\n<h3>引用第二个文件</h3>\n<p>接着添加一个content.js文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 添加 content.js\nmodule.exports= &quot;It works from content.js&quot;;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 修改entry.js\ndocument.write(require(&quot;./content.js&quot;)</code></pre></div>\n<p>重新运行命令</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">webpack ./entry.js bundle.js</code></pre></div>\n<p>刷新那个页面你会看到更新的内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">It works from content.js</code></pre></div>\n<h3>第一个加载器(loader)</h3>\n<p>现在添加一个css文件，webpack本身职能处理javascript代码，所以我们需要加载器css-loader来处理css文件，同时我们需要style-loader来处理css文件中的样式。执行命令如下：\n<code class=\"language-text\">npm install css-loader style-loader --save</code></p>\n<p>现在做如下操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 添加 style.css\nbody{\n\tbackground: yellow;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 更新 entry.js\nrequire(&#39;!style!css!./style.css&#39;);\ndocument.write(require(&#39;./content.js&#39;))</code></pre></div>\n<p>重新执行命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">webpack ./entry.js bundle.js</code></pre></div>\n<p>刷新页面，应该能看到背景色的变化。</p>\n<h3>配置文件</h3>\n<p>现在将上面对例子移动到配置文件中。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 创建 webpack.config.js\nmodule.exports={\n  entry:&#39;./entry.js&#39;,\n  output:{\n    path: __dirname,\n    filename: &quot;bundle.js&quot;\n  },\n  module:{\n    loaders:[\n      {test: /\\.css$/, loader:&quot;style!css&quot;}\n    ]\n  }\n};</code></pre></div>\n<p>现在我们只要运行命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">webpack</code></pre></div>\n<p>webpack会尝试加载当前目录下的webpack.config.js文件，这样就可以完成编译。</p>\n<h3>监控模式</h3>\n<p>如果不想每次更改后都手动执行一下，可以在最开始执行下面的命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">wepack --watch</code></pre></div>\n<p>这样webpack会自动监控每一个文件，假如有更新，则会自动重新编译。</p>\n<h3>开发服务器</h3>\n<p>使用开发服务器模块是webpack开发中不可缺少的，它会绑定一个简便服务器到localhost:8080，每次有改动会自动编译，你可以通过浏览器访问localhost:8080/webpack-dev-server/bundle来查看页面，方便调试。\n开发服务器的模块名是webpack-dev-server,安装命令如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install webpack-dev-server -g</code></pre></div>\n<blockquote>\n<p>记得也要将webpack安装在全局，此后命令行下执行webpack-dev-server即可开启服务</p>\n</blockquote>\n<h3>示例代码</h3>\n<p>示例代码可在<a href=\"https://github.com/twomeetings/webpackExample\">此处</a>找到。</p>\n<h3>参考链接</h3>\n<ol>\n<li><a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\">http://javascript.ruanyifeng.com/nodejs/module.html</a></li>\n<li><a href=\"http://webpack.github.io/docs/motivation.html\">http://webpack.github.io/docs/motivation.html</a></li>\n<li><a href=\"http://webpack.github.io/docs/tutorials/getting-started/\">http://webpack.github.io/docs/tutorials/getting-started/</a></li>\n</ol>","frontmatter":{"title":"webpack系列－开篇","date":"January 08, 2016","description":"webpack系列－开篇 第一篇"}}},"pageContext":{"slug":"/20160108-webppack-part-1/","previous":null,"next":{"fields":{"slug":"/20160115-webpack-part-2/"},"frontmatter":{"title":"webpack系列之二 - 配置文件解析"}}}}}