{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-07-24-how-to-build-captive-portal-with-nodogslash/","result":{"data":{"site":{"siteMetadata":{"title":"上线前夕"}},"markdownRemark":{"id":"1e14b882-a9ca-50aa-8fd8-bf1a3b43418e","excerpt":"日常生活中常能碰到一些商场或餐饮店提供一种需认证的wifi，这种wifi连接后不能立刻使用，往往还需要在一个页面上进一步认证操作才行，比如输入手机号填个验证码之类的。 作为一名前端开发，每当我去麦当劳店里吃饭，用手机连接wifi时，一直都很想搞清楚几个问题： 这种wifi…","html":"<p>日常生活中常能碰到一些商场或餐饮店提供一种需认证的wifi，这种wifi连接后不能立刻使用，往往还需要在一个页面上进一步认证操作才行，比如输入手机号填个验证码之类的。</p>\n<p>作为一名前端开发，每当我去麦当劳店里吃饭，用手机连接wifi时，一直都很想搞清楚几个问题：</p>\n<ul>\n<li>这种wifi认证页面是如何搭建的？</li>\n<li>它的认证机制是怎样的？</li>\n<li>它跟正常的网站会有哪些不一样？</li>\n</ul>\n<p>我工作地旁边的麦当劳wifi认证截图：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/24/1737ef087d8c450d?w=1080&#x26;h=2340&#x26;f=jpeg&#x26;s=72244\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/24/1737ef0ad36721bf?w=1080&#x26;h=2340&#x26;f=jpeg&#x26;s=69542\"></p>\n<p>这种wifi的英文学名叫<strong>Captive Portal</strong>，在开源社区中早已存在一些组件可轻松搭建这种类型的wifi，比如wifiDog, CoovaChilli, nodogslash等。</p>\n<p>为了一探究竟，我用nodogslash在树莓派上搭建了一个带认证功能的wifi，并且使用React创建了自定义认证页面，尝试搞清楚整个认证流程背后的原理。</p>\n<p>最终认证页面效果如下，点击按钮即完成认证：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/24/1737e5b0e88a8be8?w=1240&#x26;h=1106&#x26;f=png&#x26;s=353081\"></p>\n<h3>wifi认证的机制和原理</h3>\n<p>每当设备连接wifi后，系统会自动做一个连通性校验，此校验的本质是发送一个HTTP请求。如果请求失败，则会触发相应机制要求用户输入登录凭证。如果请求成功，则表示网络已通，无任何回应，这个网络校验过程叫Captive Portal Detection (CPD)。</p>\n<p>不同的操作系统校验时的请求地址不一样，比如我用手边的android和iphone手机分别做了测试，他们对应校验地址如下：</p>\n<ul>\n<li><a href=\"http://connectivitycheck.smartisan.com/wifi.html\">http://connectivitycheck.smartisan.com/wifi.html</a> （坚果 pro3）</li>\n<li><a href=\"http://captive.apple.com/hotspot-detect.html\">http://captive.apple.com/hotspot-detect.html</a> （iphone 6）</li>\n</ul>\n<p>简单来说，wifi的认证过程通过一个HTTP GET请求即可完成。以我本文示例中使用的<code>nodogsplash</code>组件为例，其内部用C语言实现了一个服务器运行在2050端口。设备连上wifi时，wifi端会生成一个token，当设备被重定向到认证页面时，页面模板中包含此token，此时用户只需发送一个GET请求将此token传入到对应服务器的认证地址即可。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/24/1737e6d58639002a?w=1636&#x26;h=602&#x26;f=png&#x26;s=71017\"></p>\n<p>如果你配置了FAS，也就是说设置了自定义认证机制，比如说你想添加了一个手机验证环节，需要用户填入手机和验证码才能完成认证。那么<code>nodogsplash</code>在重定向登录页面的时候会把一些重要参数附带在请求地址的后面，让你的自定义入口页能获取到这些认证凭证，比如token之类的参数。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/24/1737e8f0ce691329?w=706&#x26;h=1462&#x26;f=png&#x26;s=310187\"></p>\n<p>等你的自定义验证手机验证通过了，再选择将token以HTTP GET请求发送回原2050端口上的认证服务器，整个流程如下图所示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/24/1737e828bab6f58b?w=1762&#x26;h=1068&#x26;f=png&#x26;s=116808\"></p>\n<h4>认证站点的限制</h4>\n<p>需要注意的是，当用户设备连上wifi但还尚未通过验证时，网络访问是受限的，此时能访问的内容取决于防火墙的设置。比如我上面示例中，将站点配置在路由器上，网站端口是8080，依赖的后端服务器运行在端口8081上，此时必须在<code>nodogsplash</code>的防火墙规则中开放这两个端口，才能让未认证的用户设备访问的到。假如服务器配置在外网，就要将对应的域名或IP在防火墙中开放出来，具体配置方式参考<code>nodogsplash</code>关于<a href=\"https://nodogsplash.readthedocs.io/en/v4.5.1/fas.html\">FAS的文档</a>。</p>\n<p>另外，wifi认证页面的实现上要有一些额外的安全考量。比如在<code>nodogsplash</code>的官网文档中建议网站遵循一下安全准则：</p>\n<ol>\n<li>当认证成功后需立刻关闭浏览器</li>\n<li>禁止使用链接</li>\n<li>禁止文件下载功能</li>\n<li>禁止执行javascript</li>\n</ol>\n<p>关于第二条，可以使用表单提交的方式替换链接调整，而对于第四条，它的本意并不是禁止js功能，只是为了防止执行js语句引起的安全性问题。我在示例中搭建的网站使用了react框架，在android和ios上都能正常显示。</p>\n<p>因此，在功能实现上相比较通常的前端站点，自定义的wifi认证网站部分功能受限，但影响并不大，可以使用你自己擅长的前端框架来搭建。</p>\n<h3>创建需认证的wifi</h3>\n<blockquote>\n<p><strong>注意，如果你手边没有树莓派或Linux系统，或者对配置部分不感兴趣，直接跳过即可。</strong></p>\n</blockquote>\n<h4>准备工作</h4>\n<ul>\n<li>树莓派 4B</li>\n<li>hostapd和dnsmasq (用于创建wifi热点)</li>\n<li>nodogsplash (核心组件，管理wifi热点，提供认证功能)</li>\n</ul>\n<p>nodogsplash可以安装OpenWrt和Linux中，前者是开源的智能路由器操作系统，国内的一些路由器厂商通常是基于此系统定制的，后者就不必多介绍了，这次的示例就是安装在Linux系统上，为了方便安装调试，我直接使用一个树莓派4作为载体，用网线连通网络，用无线创建热点wifi。</p>\n<h4>创建wifi热点</h4>\n<p>在安装组件之前，首先将依赖包更新，然后安装<code>hostapd</code>和<code>dnsmasq</code>两个组件，前者用来创建wifi热点，后者用来处理DNS和DHCP等服务。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo apt-get update\nsudo apt-get upgrade\n\nsudo apt-get install hostapd dnsmasq</code>\n        </deckgo-highlight-code>\n      \n<p>修改配置并指定一个wifi网段，配置文件在<code>/etc/dhcpcd.conf</code></p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo vi /etc/dhcpcd.conf\n\n# ...\n\n# 文件内容如下：\ninterface wlan0\n    static ip_address=192.168.220.1/24\n    nohook wpa_supplicant</code>\n        </deckgo-highlight-code>\n      \n<p>其中wlan0是无线网卡的名称，可以通过<code>ifconfig</code>命令查询，IP地址可任意指定，只要不跟家中的wifi冲突即可，比如说此处设置的是192.168.220.*，而我家中的wifi网段是192.168.31.*。</p>\n<p>重启一下服务，让配置生效：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo systemctl restart dhcpcd</code>\n        </deckgo-highlight-code>\n      \n<p>修改hostapd配置，用于设置wifi的名称和密码，其中ssid表示此wifi的名称，wpa_passphrase表示此wifi的密码。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo vi /etc/hostapd/hostapd.conf\n\n# ...\n\n# 文件内容如下：\ninterface=wlan0\ndriver=nl80211\n\nhw_mode=g\nchannel=6\nieee80211n=1\nwmm_enabled=0\nmacaddr_acl=0\nignore_broadcast_ssid=0\n\nauth_algs=1\nwpa=2\nwpa_key_mgmt=WPA-PSK\nwpa_pairwise=TKIP\nrsn_pairwise=CCMP\n\n# wif的名称\nssid=Pi4-AP\n# wifi的秘密\nwpa_passphrase=pimylifeup</code>\n        </deckgo-highlight-code>\n      \n<h5>修改配置文件<code>/etc/default/hostapd</code></h5>\n<p>这时还需要再修改两个配置文件，一个是<code>hostapd</code>启动时的加载文件，需要将配置文件字段<code>DAEMON_CONF</code>指定为上面的文件地址，默认情况下该字段是被注释掉的。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo nano /etc/default/hostapd\n\n# ...\n# 文件内容如下：\n# 将#DAEMON_CONF=&quot;&quot; 修改为下面这行\nDAEMON_CONF=&quot;/etc/hostapd/hostapd.conf&quot;</code>\n        </deckgo-highlight-code>\n      \n<h5>修改配置文件<code>/etc/init.d/hostapd</code></h5>\n<p>另一个配置文件是系统服务配置，同意将上文的配置文件地址赋值给<code>DAEMON_CONF</code>字段。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo vi /etc/init.d/hostapd\n\n# ...\n\n# 文件内容如下：\n# 将DAEMON_CONF=修改为下面这行\nDAEMON_CONF=/etc/hostapd/hostapd.conf</code>\n        </deckgo-highlight-code>\n      \n<h5>修改配置文件<code>/etc/dnsmasq.conf</code></h5>\n<p>在此文件配置自定义wifi的网段、dns服务器等信息。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo vi /etc/dnsmasq.conf\n\n# ...\n\n# 文件内容如下：\ninterface=wlan0       # 指定无线网卡名称 \nserver=114.114.114.114       # 使用dns服务器\ndhcp-range=192.168.220.50,192.168.220.150,12h  # 指定可用IP的网段范围和释放时间</code>\n        </deckgo-highlight-code>\n      \n<h5>无线网卡转发有线网卡</h5>\n<p>修改系统配置文件中的<code>net.ipv4.ip_forward</code>字段，激活转发功能，默认情况下，该字段是被注释掉的。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo vi /etc/sysctl.conf\n\n# ...\n\n# 文件内容如下：\n# 将原#net.ipv4.ip_forward=1的注释符号去掉，修改为下面这行\nnet.ipv4.ip_forward=1</code>\n        </deckgo-highlight-code>\n      \n<p>重启系统，让此修改生效。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo reboot</code>\n        </deckgo-highlight-code>\n      \n<p>然后，通过<code>iptables</code>命令实现网卡之间的信息转发，其中<code>eth0</code>是有线网卡的名称，可通过<code>ifconfig</code>命令查询。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code>\n        </deckgo-highlight-code>\n      \n<p>最后，需要将当前<code>iptables</code>的配置保存下来，保证每次机器重启时该配置都能生效，先将配置保存到文件中<code>/etc/iptables.ipv4.nat</code>。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\"># 将配置写入/etc/iptables.ipv4.nat文件\nsudo sh -c &quot;iptables-save &gt; /etc/iptables.ipv4.nat&quot;</code>\n        </deckgo-highlight-code>\n      \n<p>修改<code>rc.local</code>，保证每次启动时都会读取<code>iptables</code>配置。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo vi /etc/rc.local\n\n# ...\n# 文件内容如下：\n\n# ...\n# 在“exit 0”这一行之前添加下面命令读取iptables的配置\niptables-restore &lt; /etc/iptables.ipv4.nat\n\nexit 0</code>\n        </deckgo-highlight-code>\n      \n<h5>启动wifi热点</h5>\n<p>最后，关于热点的配置终于配置完毕，运行一下命令启动服务：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo systemctl unmask hostapd\nsudo systemctl enable hostapd\nsudo systemctl start hostapd\nsudo service dnsmasq start</code>\n        </deckgo-highlight-code>\n      \n<p>这时，应该可以用手机检测到配置的wifi出现了<code>Pi4-AP</code>，该名称即上面配置的wifi名称，输入对应密码即可连上网络。此时可重启一下再连，确保重启后配置依然生效。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo reboot</code>\n        </deckgo-highlight-code>\n      \n<h4>安装nodogsplash</h4>\n<p>首先安装对应依赖<code>git</code>和<code>libmicrohttpd-dev</code>。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo apt install git libmicrohttpd-dev</code>\n        </deckgo-highlight-code>\n      \n<p>然后使用git直接将nodogsplash源码拿下来，直接安装。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">git clone https://github.com/nodogsplash/nodogsplash.git\ncd ./nodogsplash\nmake\nsudo make install</code>\n        </deckgo-highlight-code>\n      \n<h4>添加nodogsplash配置</h4>\n<p>添加配置到文件<code>/etc/nodogsplash/nodogsplash.conf</code>中，指定对应网卡、网关、最大连接用户数和认证过期时间。其中，<code>wlan0</code>是上面配置的无线网卡名，IP地址是上面配置的wifi热点的网关。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo vi /etc/nodogsplash/nodogsplash.conf\n\n# ...\n\n# 文件内容如下：\nGatewayInterface wlan0\nGatewayAddress 192.168.220.1\nMaxClients 250\nAuthIdleTimeout 480</code>\n        </deckgo-highlight-code>\n      \n<p>配置完成后，启动nodogsplash。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo nodogsplash</code>\n        </deckgo-highlight-code>\n      \n<p>此时，用手机连接创建的wifi并输入密码以后，即可看到以下弹窗，要求登录认证。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/24/1737eecb43cc96b4?w=1080&#x26;h=2340&#x26;f=jpeg&#x26;s=59299\"></p>\n<p>点击登录后进入认证页面。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/24/1737eed8d34ef200?w=1080&#x26;h=2340&#x26;f=jpeg&#x26;s=86961\"></p>\n<h3><a href=\"#section-2\">配置自定义wifi认证页面</a></h3>\n<p><code>nodogsplash</code>本身提供了自定义验证机制 - <a href=\"https://nodogsplash.readthedocs.io/en/v4.5.1/fas.html\">Forwarding Authentication Service (FAS)</a>，它可以指定自定义的认证页面和认证方式，通过简单配置对应服务器的IP和端口即可。</p>\n<p>比如，我在同一台机器上开启一个react站点，端口为8080，若想把此站点设置为认证入口页，只需在配置文件中添加下面四行代码即可，其中<code>fas_secure_enabled</code>有<a href=\"https://nodogsplash.readthedocs.io/en/v4.5.1/fas.html#example-fas-query-strings\">从0到3的多个等级值</a>，从低到高会让安全性和复杂性递增，此处选了最简单等级用于做演示。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">sudo vi /etc/nodogsplash/nodogsplash.conf\n\n# ...\n\n# 要添加的内容如下\nfasport 8080\nfasremoteip 192.168.220.1\nfaspath /\nfas_secure_enabled 0</code>\n        </deckgo-highlight-code>\n      \n<p>最后，呈现的样子如下，点击按钮即完成认证，顺利联网。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/24/1737e5b0e88a8be8?w=1240&#x26;h=1106&#x26;f=png&#x26;s=353081\"></p>\n<h4>备注：关于nodogsplash的版本</h4>\n<blockquote>\n<p>nodogsplash源码中的master分支指向的3.3.5版本，而此时最新版是5.0.0（笔者写此文章时间2020.7），越新的版本其文档越完善，但要注意的是4.5.1版本是一个分水岭，因为从4.5.1之后该项目的自定义登录授权功能被剥离到一个独立项目<a href=\"https://github.com/openNDS/openNDS\">openNDS</a>。</p>\n</blockquote>\n<blockquote>\n<p>假如切换到v4.5.1版后碰到<code>libmicrohttpd</code>报<a href=\"https://raspberrypi.stackexchange.com/questions/108803/issue-with-nodogsplash-saying-it-needed-updateed-libmicrohttpd-dev-but-i-seems\">组件过时异常</a>，可在配置文件中添加字段<code>se_outdated_mhd 1</code>避开此异常。</p>\n</blockquote>\n<h3>结语</h3>\n<p>带认证的wifi在商业活动中越来越常见，开源社区中，<code>nodogsplash</code>是其中一种实现方式，在少量限制的情况下，提供了足够的灵活性让你用熟悉的方式像搭建其他网站一样搭建wifi认证页面。最终，把你的前端能力延伸到路由器上。</p>\n<h4>参考文献</h4>\n<blockquote>\n<p><a href=\"https://github.com/nodogsplash/nodogsplash\">nodogsplash的github地址</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://nodogsplashdocs.readthedocs.io/en/stable/\">nodogsplash的官方文档</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blogs.arubanetworks.com/industries/rfc-7710-captive-portal-identification-using-dhcp-or-router-advertisements-ras/\">captive-portal和rfc-7710文献关联</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://wiki.mozilla.org/QA/Captive_Portals\">Captive-Portal的wiki</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://pimylifeup.com/raspberry-pi-wireless-access-point/\">树莓派搭建wifi热点</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://pimylifeup.com/raspberry-pi-captive-portal/\">树莓派搭建captive-portal</a></p>\n</blockquote>","frontmatter":{"title":"如何搭建类似麦当劳店中需登录认证的wifi","date":"July 24, 2020","description":null,"cover":{"publicURL":"/static/cover-d4e2b13401c6c5856cd04ee80787b974.png"}}}},"pageContext":{"slug":"/2020-07-24-how-to-build-captive-portal-with-nodogslash/","previous":{"fields":{"slug":"/2020-07-14-the-addicting-ci-tool-dangerjs/"},"frontmatter":{"title":"试了就戒不掉的CI工具-dangerjs"}},"next":{"fields":{"slug":"/2020-07-29-the-diff-between-promise-all-and-promise-allsettled/"},"frontmatter":{"title":"Promise.all和Promise.allSettled的区别"}}}},"staticQueryHashes":["2841359383"]}