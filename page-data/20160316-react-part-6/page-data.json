{"componentChunkName":"component---src-templates-blog-post-js","path":"/20160316-react-part-6/","result":{"data":{"site":{"siteMetadata":{"title":"上线前夕"}},"markdownRemark":{"id":"46290fa1-6927-523e-b51b-7e4614c7e6d0","excerpt":"函数就是stateless组件 前文介绍了编写react组件的两种写法，React写法和ES6写法，除此之外还有一种编写组件的写法，而这种写法编写的组件会略有不同，这样的组件叫stateless组件。顾名思义，stateless组件就是没有状态的组件，这种组件的写法基本等同于javascript…","html":"<h3>函数就是stateless组件</h3>\n<p>前文介绍了编写react组件的两种写法，React写法和ES6写法，除此之外还有一种编写组件的写法，而这种写法编写的组件会略有不同，这样的组件叫stateless组件。顾名思义，stateless组件就是没有状态的组件，这种组件的写法基本等同于javascript的函数，函数的参数就是组件的props属性。</p>\n<p>现在我们用这种写法重写<a href=\"/20150712-react-part-1\">系列文章第一篇</a>的示例，添加index.js文件，内容如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\n\nfunction HelloMessage(props){\n  return (&lt;div&gt;Hello {props.name}, {props.year}!&lt;/div&gt;)\n}\n\nReactDOM.render(\n  &lt;HelloMessage name=&quot;Jacky&quot; year=&#39;2016&#39;/&gt;,\n  document.getElementById(&#39;demo6&#39;)\n)</code>\n        </deckgo-highlight-code>\n      \n<p>代码中可以看到，HelloMessage组件就是函数HelloMessage，函数的返回值就是组件要呈现的内容，等同于组件的render方法。与返回值与以往函数的区别是：字符串作为其返回值不是用引号包裹，而是括号。</p>\n<p>函数的参数就是组件的props，而这种组件不支持state，这也是组件名称的由来。除此之外，这种组件不支持ref属性，没有组件生命周期相关的事件方法，但支持propTypes，写法和<a href=\"/20160301-react-part-5\">ES6组件写法</a>)一样。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">HelloMessage.propType = { name: Proptypes.string.isRequired}</code>\n        </deckgo-highlight-code>\n      \n<p>因此，这种组件的作用就是用来简单的呈现数据，最大的特点就是编写方便。</p>\n<h3>箭头函数</h3>\n<p>在ES6的语法里，函数可以有一种写法叫箭头函数，比如上面的HelloMessage组件箭头函数编写后，代码如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">var HelloMessage=(props)=&gt;{\n  return (&lt;div&gt;Hello {props.name}, {props.year}!&lt;/div&gt;)\n}</code>\n        </deckgo-highlight-code>\n      \n<p>而且箭头函数可以进一步简化：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">var HelloMessage=(props)=&gt; &lt;div&gt;Hello {props.name}, {props.year}!&lt;/div&gt;;</code>\n        </deckgo-highlight-code>\n      \n<p>可以看到stateless组件的写法是三种写法里最简洁的。</p>\n<h3>解构赋值</h3>\n<p>解构是ES6的新赋值语法，变量可以通过解构赋值，简单来说就是可以从对象中抽取值给变量。像下面代码这样，变量a和b可以直接从obj对象中提取属性值，前者等于name，后者等于year。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">var obj={name: &#39;jacky&#39;, year:2016 }\n var {name:a, year:b} = obj;\n console.log(a); // jacky\n console.log(b); // 2016</code>\n        </deckgo-highlight-code>\n      \n<p>通过解构给变量赋值，需要被包裹在花括号内。且当变量名和对象的属性名一样时，语法可以进一步简化，如下，变量name和year直接就被赋了obj的属性name和year的值：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">var obj={name: &#39;jacky&#39;, year:2016 }\nvar {name, year} = obj;</code>\n        </deckgo-highlight-code>\n      \n<blockquote>\n<p>解构也可以用在数组，关于解构的详细的说明可以在阮一峰老师的文章：<a href=\"http://es6.ruanyifeng.com/#docs/destructuring\">ECMAScript6入门</a>里查看。</p>\n</blockquote>\n<p>当解构和箭头函数组合在一起时，我们的stateless组件的写法可以做进一步的改变：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">var HelloMessage=({name, year})=&gt; &lt;div&gt;Hello {name}, {year}!&lt;/div&gt;;</code>\n        </deckgo-highlight-code>\n      \n<p>可以看到解构赋值直接用在了函数的第一个参数，props的name和year属性被赋给了name和year变量。</p>\n<p>注意，这种简化的解构写法中，变量名一定要和对象对属性名一致，而正常的函数的参数名可以使任意的字符串，比如原写法里的props参数就可以换成任何p，或任何想要的名字。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">var HelloMessage=(p)=&gt; &lt;div&gt;Hello {p.name}, {p.year}!&lt;/div&gt;</code>\n        </deckgo-highlight-code>\n      \n<p>因此，当看到一个箭头函数时，判断其参数是否使用解构显得格外重要。判断的依据就是，解构变量需要被包含在花括号内。</p>\n<h3>本文示例</h3>\n<p>本文的示例可以在<a href=\"https://github.com/twomeetings/reactExamples\">示例代码</a>中的demo6目录中找到。</p>","frontmatter":{"title":"React系列之六－stateless组件的写法","date":"March 16, 2016","description":null,"cover":null}}},"pageContext":{"slug":"/20160316-react-part-6/","previous":{"fields":{"slug":"/20160301-react-part-5/"},"frontmatter":{"title":"React系列之五－ES6语法编写组件"}},"next":{"fields":{"slug":"/20160328-react-part-7/"},"frontmatter":{"title":"React系列之七－组件间的通信－呈现组件和容器组件"}}}},"staticQueryHashes":["2841359383"]}