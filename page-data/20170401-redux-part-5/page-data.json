{"componentChunkName":"component---src-templates-blog-post-js","path":"/20170401-redux-part-5/","result":{"data":{"site":{"siteMetadata":{"title":"上线前夕"}},"markdownRemark":{"id":"7ac92ea4-e758-5dbc-8668-f9d581cd75bf","excerpt":"react-redux组件是React和Redux两个框架的粘合剂，它共有两个部分：Provider组件和connect方法。上篇已介绍了Provider组件，本文就来详细讲解connect方法。 connect方法 在React…","html":"<p>react-redux组件是React和Redux两个框架的粘合剂，它共有两个部分：Provider组件和connect方法。上篇已介绍了Provider组件，本文就来详细讲解connect方法。</p>\n<h3>connect方法</h3>\n<p>在<a href=\"/20160328-react-part-7\">React系列之七</a>中说到了一种设计模式－呈现组件和容器组件。简单来说，呈现组件只通过传入的属性负责呈现逻辑，而跟state相关的数据改动都放到容器组件中。connect方法就是为这种模式而生，它可以通过呈现组件快速生成容器组件。</p>\n<p>connect方法有4个参数，通常只会用到前两个，参数类型都是函数。假设现在已有一个呈现组件叫BookList, 那么connect的使用方法如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">function mapStateToProps(state) {\n  return { todos: state.books}\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return { actions: bindActionCreators(actionCreators, dispatch) }\n}\n\nvar container = connect(mapStateToProps, mapDispatchToProps)(BookList)</code>\n        </deckgo-highlight-code>\n      \n<p>从方法的名字mapStateToProps和mapDispatchToProps可以看出，connect的主要功能是以下两点：</p>\n<ol>\n<li>从全局state中读取值，传递给呈现组件的props属性中。</li>\n<li>从让action creator和dispatch组合成简化的方法，传递给组件的props属性中。</li>\n</ol>\n<p>这两点恰恰是容器组件要做的事，所以connect方法其实就是通过呈现组件快速生成容器组件的快捷方式。</p>\n<blockquote>\n<p>关于action creator和dispatch的组合可参考<a href=\"/20170119-redux-part-3\">Redux系列之三</a>中，对bindActionCreators的描述。</p>\n</blockquote>\n<h3>用connect方法改造示例</h3>\n<p>这里我们用connect对<a href=\"/20170119-react-part-2\">React系列文章之二</a>中的例子做改造，该例中只有一个与颜色相关的下拉框，当用户选择后，state会保存选中的值。</p>\n<p><img src=\"http://7xtbg7.com2.z0.glb.clouddn.com/redux5-1\"></p>\n<p>首先安装react-redux组件，命令如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">npm install react-redux --save</code>\n        </deckgo-highlight-code>\n      \n<p>而前文中说到redux将所有组件的state都存入了一个全局变量中，因此redux的重要作用之一就是容器组件的简单化。</p>\n<p>我们现在将下拉框中的state相关代码剥离出来，只留下呈现的逻辑，代码如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">// picker.js\nimport React, { PropTypes } from &#39;react&#39;\n\nvar Picker=({ value, onChange})=&gt;{\n  return(\n    &lt;div&gt;\n      &lt;select onChange={e =&gt; onChange(e.target.value)}\n              value={value} &gt;\n        &lt;option value=&#39;&#39;&gt;&lt;/option&gt;\n        &lt;option value=&#39;red&#39;&gt;red&lt;/option&gt;\n        &lt;option value=&#39;blue&#39;&gt;blue&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;p&gt;selectedValue is: {value} &lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n      \n<p>代码中可以看出Picker组件接受2个属性值，没有state的操作，因为所有的state都保存在Redux中的Store里。修改Store的方法只有通过发送Action指令到Reducer中，首先，我们通过ActionCreator的方式来创建Action。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">// actionCreator.js\nfunction selectChangeCreator(value){\n  return { type: &#39;SELECTCHANGE&#39;, value: value };\n}\n\nexport default selectChangeCreator;</code>\n        </deckgo-highlight-code>\n      \n<p>现在创建一个名为selectChange的reducer，代码中需要注意的是，在’SELECTCHANGE’分支下，原state并没有做修改，而是新的state被创建并返回，不改变state状态，这是redux设计中的原则，否则会出现数据更新，组件不更新的情况。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">// reducer.js\nexport function selectChange(state={selectedValue:&#39;&#39;}, action){\n  switch (action.type) {\n    case &#39;SELECTCHANGE&#39;:\n      var newState = Object.assign({},\n        ...state,\n        {\n          selectedValue: action.value\n        })\n\n      return newState;\n    default:\n      return state;\n  }\n}</code>\n        </deckgo-highlight-code>\n      \n<blockquote>\n<p>关于不更新state的原则，可在<a href=\"http://redux.js.org/docs/Troubleshooting.html\">官网此处</a>查询\n创建newState用到的”Object.assign”和扩展字符串 “…state”,可在阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\">ES6入门中</a>查询</p>\n</blockquote>\n<h4>通过connect方法创建容器组件</h4>\n<p>准备工作都完成以后，现在我们就可以通过connect方法来创建容器组件了。首先，创建一个组件将上文所写的Picker组件包含进去，并将对应的属性值赋值给Picker组件。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">import Picker from &#39;./picker&#39;\n\nclass Container extends Component{\n  render(){\n    var {value, onChange}= this.props;\n    return(\n    &lt;div&gt;\n      &lt;Picker value={value} onChange={onChange} /&gt;\n    &lt;/div&gt;\n  )\n  }\n}</code>\n        </deckgo-highlight-code>\n      \n<p>代码中可以看到，value值和onChange方法都是从自身到props属性取出，它们就是通过connect方法生成的，代码如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">function mapStateToProps(state){\n  var { selectChange }= state\n  return {\n    value: selectChange.selectedValue\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  var boundActionCreator=bindActionCreators(actionCreator, dispatch);\n  return {\n    onChange:(value)=&gt;{\n       boundActionCreator(value)\n     }\n  }\n}\n\nvar PickerContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps)(Container)\n\nexport default PickerContainer</code>\n        </deckgo-highlight-code>\n      \n<p>代码中可以看到，mapStateToProps方法将state.selectChange.selectedValue赋值给了value。mapDispatchToProps将dispatch和actionCreator绑定后的方法赋值给了onChange，最后生成PickerContainer组件并返回。</p>\n<p>现在只需要在入口文件(index.js)中引用此组件就可以了。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">// index.js\nimport React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport { combineReducers, createStore} from &#39;redux&#39;\nimport { Provider } from &#39;react-redux&#39;\nimport { selectChange } from &#39;./reducer&#39;\nimport PickerContainer from &#39;./container.js&#39;\n\nvar reducers= combineReducers({selectChange})\n\nvar store = createStore(reducers)\n\nReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;PickerContainer /&gt;\n  &lt;/Provider&gt;,\n  document.getElementById(&#39;demo5&#39;)\n)</code>\n        </deckgo-highlight-code>\n      \n<p>记得connect需要和Provider组件配合使用，因此PickerContainer必须被包裹在Provider中。</p>\n<blockquote>\n<p>关于Provider的使用说明可参考<a href=\"/20170302-redux-part-4\">上篇</a></p>\n</blockquote>\n<h3>结语</h3>\n<p>react-redux组件的connect方法是通过呈现组件创建容器组件的一种快捷方式，它需要和Provider组件一起使用。</p>\n<p>本文相关的代码可在<a href=\"https://github.com/twomeetings/reduxExample\">示例代码</a>中的目录demo5中找到。</p>","frontmatter":{"title":"Redux系列之五 － 粘合剂react-redux组件（下）","date":"April 01, 2017","description":null}}},"pageContext":{"slug":"/20170401-redux-part-5/","previous":{"fields":{"slug":"/20170302-redux-part-4/"},"frontmatter":{"title":"Redux系列之四 － 粘合剂react-redux组件（上）"}},"next":{"fields":{"slug":"/2020-06-11-how-to-implement-resumable-upload/"},"frontmatter":{"title":"web端断点续传的思路和实现"}}}},"staticQueryHashes":["2841359383"]}