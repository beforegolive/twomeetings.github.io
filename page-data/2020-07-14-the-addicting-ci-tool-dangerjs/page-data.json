{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-07-14-the-addicting-ci-tool-dangerjs/","result":{"data":{"site":{"siteMetadata":{"title":"上线前夕"}},"markdownRemark":{"id":"cac0ad13-8151-5405-a890-c467266f9735","excerpt":"在开源社区中，danger的使用尤其普遍，它可以拿来自动判断每个人提交的代码合并请求（github中叫Pull Request，下文简称PR，gitlab中叫Merge Request，下文简称MR）是否符合规范，自动化一些费时费力的人工检查，从而保证代码质量，是项目管理的利器。 比如开源项目styled…","html":"<p>在开源社区中，danger的使用尤其普遍，它可以拿来自动判断每个人提交的代码合并请求（github中叫Pull Request，下文简称PR，gitlab中叫Merge Request，下文简称MR）是否符合规范，自动化一些费时费力的人工检查，从而保证代码质量，是项目管理的利器。</p>\n<p>比如开源项目<a href=\"https://github.com/styled-components/styled-components\">styled-componet</a>的这个自动回复机器人就是用danger实现的。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/13/1734543bf6969c3a?w=777&#x26;h=199&#x26;f=png&#x26;s=33630\"></p>\n<p>Danger最初是由ruby社区发展起来，之后增加了对js语言的支持，衍生出DangerJs。从它的标语中即可看出此工具存在的意义：<strong>Stop saying “you forgot to …” in code review</strong>，实际上，此工具可做的事情要远比标语中描述的多。</p>\n<p>在整个代码合并流程中，danger的位置通常在测试和代码规范化检查的后一步，人工检查的前一步，相当于是足球中的清道夫的角色，</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/13/1734559a0448b54a?w=2060&#x26;h=360&#x26;f=png&#x26;s=38537\"></p>\n<p>danger常见的使用场景是：通过自定制的脚本自动化处理一些费神的人工检查。我以前在项目中使用dangerjs在gitlab上实现过这样的检查：合并代码时有没有勾选“合并后删除远端分支”的复选框，有没有勾选“合并时压缩git节点”的复选框，有没有在合并标题中写上对应电子看板的任务卡ID等等，如果没有操作这些则禁止代码合并，及其方便的规范了整个团队的git开发流程。</p>\n<p>在上篇<a href=\"https://juejin.im/post/6847902224794943495\">介绍lerna的文章</a>里，用dangerjs实现了子项目权限检查：判定当前提交人是否满足某个目录的提交权限，不满足则不允许代码合并，效果如下图所示。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/13/1734543212ec650e?w=2018&#x26;h=912&#x26;f=png&#x26;s=288646\"></p>\n<h3>安装Dangerjs</h3>\n<p>Dangerjs支持github和gitlab两大代码托管平台，也支持私有gitlab服务器，不过它对github的支持最好，简单几步在即可在一个github项目中加入danger检查。</p>\n<p>在你的项目中，dangerjs用起来就像其他任何npm包一样，一行命令即可安装。（注意包名没有js后缀）</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">yarn add -D danger</code>\n        </deckgo-highlight-code>\n      \n<h3>设置github的token</h3>\n<p>danger需要使用你的token授权来做相应操作，比如添加评论到对应的PR下方给出提示。你可以点击<a href=\"https://github.com/settings/tokens/new\">此链接</a>在github上生成对应token，token的名称可以随便起，权限要记得给足。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/13/173456ceceb894c1?w=1400&#x26;h=790&#x26;f=jpeg&#x26;s=132923\"></p>\n<h3>将token保存到环境变量中</h3>\n<p>需要把token的变量名命名为<code>DANGER_GITHUB_API_TOKEN</code>，并且保存在CI的配置里，比如我在github中使用了circleci作为持续集成的工具，token就需要保存到如下位置，见截图：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/14/1734a263655eea6e?w=2686&#x26;h=1102&#x26;f=png&#x26;s=262091\"></p>\n<p>注意，如果是gitlab公网上的项目，那变量名就不一样了，需设置为<code>DANGER_GITLAB_API_TOKEN</code>, 如果是私有gitlab服务器，还需要添加另外一个变量<code>DANGER_GITLAB_HOST</code>将地址指向你自己的服务器，详情可参考<a href=\"https://danger.systems/js/usage/gitlab.html\">官网链接</a>。</p>\n<h3>创建dangerfile.js文件</h3>\n<p>项目根目录下创建dangerfile.js文件用于编写对应的脚本，比如下面几行代码就是最常用的写法。</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">import { danger, fail, warn } from &#39;danger&#39;\n\nfail(&#39;This is a failure message&#39;) // 显示一条错误信息\n\nwarn(&#39;This is a warn message&#39;) // 显示一条警告信息\n\nconst { title } = danger.github.pr\nif (!title.startsWith(&#39;feature/&#39;)) {\n\tfail(&#39;标题必须要由&quot;feature/&quot;开头&#39;)\n}</code>\n        </deckgo-highlight-code>\n      \n<h3>本地测试danger脚本</h3>\n<p>在脚本正式推向CI环境前，可以本地测试一下脚本是否符合预期。首先要创建Pull Requst，然后获取此PR的地址，之后使用npm或者yarn执行命令：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">yarn danger pr 创建的PR的地址</code>\n        </deckgo-highlight-code>\n      \n<p>此时，你可能会碰到下面这样的提示，这是因为还没有在本地设置token变量。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/14/1734a3ec4d88347d?w=1760&#x26;h=214&#x26;f=png&#x26;s=79558\"></p>\n<p>本地直接执行一下命令来声明变量即可。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">export DANGER_GITHUB_API_TOKEN=xxxxxx</code>\n        </deckgo-highlight-code>\n      \n<p>设置token变量后重新执行<code>danger pr</code>的命令。访问对应的PR地址，如果看到下图这样的效果，说明你写的dangerjs脚本生效了。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/14/1734a46cfe487cf1?w=1886&#x26;h=822&#x26;f=png&#x26;s=164780\"></p>\n<p>最后，把<code>yarn danger ci</code>或者<code>npm danger ci</code>放在你的CI文件中的合适位置，这样danger就添加完成了。</p>\n<p>另外，你可以申请一个github账号名为’xxxx-bot’，再贴一张机器人图片作为头像，并用此账号的token作为变量来自动回复，最终能让整个效果更显技术含量。 </p>\n<h3>能获取到的数据</h3>\n<p>除了标题之外，danger能获取当前PR中的各种信息字段，比如用户信息、修改的文件、代码审核人、代码合并的配置等等，从下面的截图里包含了一些常用字段。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/14/1734a52d35926ddb?w=2268&#x26;h=1670&#x26;f=png&#x26;s=430546\"></p>\n<p>除此之外，<a href=\"https://danger.systems/js/reference.html\">dangerjs的官网</a>也给出了详细的类型数据，你可以根据需要定制符合自己项目需求的检查脚本。</p>\n<h3>结语</h3>\n<p>danger可以在合并代码时提供自定义的合并规则，能规范整个项目的开发流程，把它整合到CI中能帮你自动化很多繁琐的人工检查，无论是开源项目还是日常开发项目，danger都是项目流程管理的利器，一旦试过你就再也戒不掉。</p>\n<blockquote>\n<p><strong>相关资料</strong></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://medium.com/@ivan.ha/integrate-danger-js-in-5-minutes-55515bc5355d\">integrate-danger-js-in-5-minutes</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://danger.systems/js/\">dangerjs官网</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/twomeetings/lerna-example/pull/3\">文章中的PR地址</a></p>\n</blockquote>","frontmatter":{"title":"试了就戒不掉的CI工具-dangerjs","date":"July 14, 2020","description":null,"cover":{"publicURL":"/static/cover-0845e35192a767f9bc59b60ac3b0ce8f.jpeg"}}}},"pageContext":{"slug":"/2020-07-14-the-addicting-ci-tool-dangerjs/","previous":{"fields":{"slug":"/2020-07-10-you-should-use-lerna-for-sharing-code/"},"frontmatter":{"title":"大前端项目代码重用，也许lerna是最好的选择"}},"next":{"fields":{"slug":"/2020-07-24-how-to-build-captive-portal-with-nodogslash/"},"frontmatter":{"title":"如何搭建类似麦当劳店中需登录认证的wifi"}}}},"staticQueryHashes":["2841359383"]}