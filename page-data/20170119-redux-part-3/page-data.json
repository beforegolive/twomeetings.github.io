{"componentChunkName":"component---src-templates-blog-post-js","path":"/20170119-redux-part-3/","result":{"data":{"site":{"siteMetadata":{"title":"上线前夕"}},"markdownRemark":{"id":"1582974e-5ff5-5784-94b7-50fc76c1b681","excerpt":"Action和Action Creator Action是Redux中的核心概念之一，它是信息的载体包含跟操作指令相关的信息，因此它是一个必需包含type属性的对象，type表示我们自定义的指令类别。 发送指令需调用Store的方法dispatch，比如在前文的示例中，三个Counter组件通过dispatch…","html":"<h3>Action和Action Creator</h3>\n<p>Action是Redux中的核心概念之一，它是信息的载体包含跟操作指令相关的信息，因此它是一个必需包含type属性的对象，type表示我们自定义的指令类别。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">{\n\ttype: &#39;SOMETHING&#39;,\n\t//...\n}</code>\n        </deckgo-highlight-code>\n      \n<p>发送指令需调用Store的方法dispatch，比如在<a href=\"/20161104-redux-part-2\">前文</a>的示例中，三个Counter组件通过dispatch分别发生了不同类别的指令：INCREMENT, OTHER<em>INCREMENT, DOUBLE</em>INCREMENT。相关代码如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">\t\t&lt;Counter\n        value = {state.counterReducer.value}\n        handleClick={()=&gt; store.dispatch({type:&#39;INCREMENT&#39;})}\n      /&gt;\n      &lt;Counter\n        value = {state.counterReducer.otherValue}\n        handleClick={()=&gt; store.dispatch({type:&#39;OTHER_INCREMENT&#39;})}\n      /&gt;\n      &lt;Counter\n        value = {state.secondReducer.value}\n        handleClick={()=&gt; store.dispatch({type:&#39;DOUBLE_INCREMENT&#39;})}\n      /&gt;</code>\n        </deckgo-highlight-code>\n      \n<p>有时，action会包含一些逻辑，因此，在redux中，通常会用一个方法来创建action，这样的方法叫‘action creator’。比如，创建INCREMENT类别的action，可创建一个increment方法，写法如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">function incremment(){\n  return {\n    type: &#39;INCREMENT&#39;\n  }\n}</code>\n        </deckgo-highlight-code>\n      \n<h3>简化Action指令的发送</h3>\n<p>上节看似多此一举的写法，实际上给redux带来了很多扩展性和便利。redux中发送action总需要调用Store的dispatch方法，如下。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">()=&gt; store.dispatch({type:&#39;INCREMENT&#39;})</code>\n        </deckgo-highlight-code>\n      \n<p>redux提供了bindActionCreator方法，可以将action和dispatch结合在一起，达到简化写法的目的。</p>\n<p>现在我们创建一个action.js，添加三个方法用于创建那三个组件需要的action。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">export function incremment(){\n  return {\n    type: &#39;INCREMENT&#39;\n  }\n}\n\nexport function otherIncremment(){\n  return {\n    type: &#39;OTHER_INCREMENT&#39;\n  }\n}\n\nexport function doubleIncremment(){\n  return {\n    type: &#39;DOUBLE_INCREMENT&#39;\n  }\n}</code>\n        </deckgo-highlight-code>\n      \n<p>在入口文件(index.js)中，我们引入并调用bindActionCreator，将其与dispatch合并。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">mport {createStore, combineReducers, bindActionCreators} from &#39;redux&#39;\nimport {counterReducer, secondReducer} from &#39;./reducer.js&#39;\nimport * as actionCreators from &#39;./action.js&#39;\n\nvar reducers=combineReducers({counterReducer,secondReducer})\n\nconst store = createStore(reducers)\n\nvar boundActionCreators = bindActionCreators(actionCreators, store.dispatch)</code>\n        </deckgo-highlight-code>\n      \n<blockquote>\n<p>此处import * as actionCreators，是引入模块的一种写法，作用是将模块中所有导出的部分引入并命名为一个变量，import命令的详细信息可参考阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\">ES6入门</a></p>\n</blockquote>\n<p>绑定后的boundActionCreators对象结构如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">{\n\tincremment: function(){/.../},\n\totherIncremment: function(){/.../},\n\tdoubleIncremment: function(){/.../}\n}</code>\n        </deckgo-highlight-code>\n      \n<p>通过bindActionCreator方法的绑定，每次发送Action指令时，就不必再添加调用dispatch方法，或者说通过绑定，dispatch方法会自动被调用。因此入口文件(index.js)的组件呈现部分，就可以改动如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">ReactDOM.render(\n    &lt;div&gt;\n      &lt;Counter\n        value = {state.counterReducer.value}\n        handleClick={boundActionCreators.incremment}\n      /&gt;\n      &lt;Counter\n        value = {state.counterReducer.otherValue}\n        handleClick={boundActionCreators.otherIncremment}\n      /&gt;\n      &lt;Counter\n        value = {state.secondReducer.value}\n        handleClick={boundActionCreators.doubleIncremment}\n      /&gt;\n    &lt;/div&gt;\n    ,\n    document.getElementById(&#39;demo3&#39;)\n  )</code>\n        </deckgo-highlight-code>\n      \n<h3>结语</h3>\n<p>Action是Redux中的核心组件，承载着指令相关的信息，创建Action的方法有两种，直接手写和通过方法返回，而redux推荐后一种方法，并且提供了bindActionCreator方法来简化Action指令发送相关的代码。</p>\n<p>示例代码可以在<a href=\"https://github.com/twomeetings/reduxExample\">此处下载</a>，本文相关的代码可在目录demo3中寻找。</p>","frontmatter":{"title":"Redux系列之三－Action的简化：bindActionCreator方法","date":"January 19, 2017","description":null,"cover":null}}},"pageContext":{"slug":"/20170119-redux-part-3/","previous":{"fields":{"slug":"/20161104-redux-part-2/"},"frontmatter":{"title":"Redux系列之二－Reducer的合并：combineReducers方法"}},"next":{"fields":{"slug":"/20170302-redux-part-4/"},"frontmatter":{"title":"Redux系列之四 － 粘合剂react-redux组件（上）"}}}},"staticQueryHashes":["2841359383"]}