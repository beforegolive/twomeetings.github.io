{"componentChunkName":"component---src-templates-blog-post-js","path":"/20160208-webpack-part-4/","result":{"data":{"site":{"siteMetadata":{"title":"上线前夕"}},"markdownRemark":{"id":"7634b3dc-451d-5a0b-8ac0-567395a252e6","excerpt":"css的提取和合并 在webpack模版插件下，可以对css做提取和合并成一个文件，从而达到优化性能和方便管理的目的。比如我们现在需要index.js文件中引入两个css文件： 提取和合并的工作就需要用到插件‘extract-text-webpack-plugin…","html":"<h3>css的提取和合并</h3>\n<p>在webpack模版插件下，可以对css做提取和合并成一个文件，从而达到优化性能和方便管理的目的。比如我们现在需要index.js文件中引入两个css文件：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">require(&#39;./main.css&#39;);\nrequire(&#39;./common.css&#39;);</code>\n        </deckgo-highlight-code>\n      \n<p>提取和合并的工作就需要用到插件‘extract-text-webpack-plugin’，安装代码如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">npm install extract-text-webpack-plugin --save-dev</code>\n        </deckgo-highlight-code>\n      \n<p>首先在配置文件中该插件，并创建一个实例。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">var ExtractTextWebpackPlugin=require(&#39;extract-text-webpack-plugin&#39;);\nvar extractCss = new ExtractTextWebpackPlugin(&#39;[name].css&#39;);</code>\n        </deckgo-highlight-code>\n      \n<blockquote>\n<p>[name]类似output配置节中的变量，等于对应模块的名称，其他几个变量可在<a href=\"https://github.com/webpack/extract-text-webpack-plugin\">对应网站</a>查询</p>\n</blockquote>\n<p>然后，我们需要修改module的loaders配置节中针对css文件的部分，如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">{test: /\\.css$/, loader: extractCss.extract(&#39;style&#39;,&#39;css&#39;)}</code>\n        </deckgo-highlight-code>\n      \n<p>最后在plugins配置节加入这个插件的实例。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">plugins:[\n\t...,\n\textractCss,\n\t...\n]</code>\n        </deckgo-highlight-code>\n      \n<p>运行编译命令：webpack。编译后的文件就多来一个index.css,这个文件的内容合并main.css和common.css的内容。而且模版生成的html页面里，head标签自动加入了css引用的代码，省去了手工处理的麻烦，如下：</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n  &lt;link href=&quot;index.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;/head&gt;\n  &lt;body&gt;</code>\n        </deckgo-highlight-code>\n      \n<p>如前面提到的，通过这样的处理不但让css文件方便管理之外，还减少了请求次数，提高了性能。</p>\n<p>css和img的抽取</p>\n<h3>图片的提取</h3>\n<p>假如项目中需要用到图片该怎么处理呢？比如现在我们在模版文件用img标签来引入一张图片。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">&lt;img src=&quot;./image/what-is-webpack.png&quot; /&gt;</code>\n        </deckgo-highlight-code>\n      \n<p>现在在项目下添加img目录，并在其中放入一张图片(what-is-webpack.png)。然后我们在index.js这个入口文件加入引用代码。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">import &#39;./imgs/what-is-webpack.png&#39;</code>\n        </deckgo-highlight-code>\n      \n<p>然后我们用最基本的文件加载器file-loader处理图片，安装命令如下:</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">npm install file-loader --save-dev</code>\n        </deckgo-highlight-code>\n      \n<p>然后在配置文件的module字段区域添加如下代码，其中name=[name].[ext]表示编译时命名文件的规则。 </p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">{test: /\\.png$/, loader:&#39;file?name=[name].[ext]&#39;}</code>\n        </deckgo-highlight-code>\n      \n<blockquote>\n<p> [name]和[ext]是其内置的变量，除此之外还有[path]，[hash]等，详细的说明可到<a href=\"https://github.com/webpack/file-loader\">对应网站</a>查询</p>\n</blockquote>\n<p>执行webpack命令进行编译，图片就会出现在发布目录下。假如你想把图片放在某个目录下，只要像下面代码，在前面加目录名就行了。</p>\n\n        <deckgo-highlight-code  >\n          <code slot=\"code\">{test: /\\.png$/, loader:&#39;file?name=image/[name].[ext]&#39;}</code>\n        </deckgo-highlight-code>\n      \n<h3>示例代码如下</h3>\n<p>本文代码可在<a href=\"https://github.com/twomeetings/webpackPluginExtension\">此处</a>查看。</p>","frontmatter":{"title":"webpack系列之四－资源文件的整合","date":"February 08, 2016","description":null}}},"pageContext":{"slug":"/20160208-webpack-part-4/","previous":{"fields":{"slug":"/20160119-webpack-part-3/"},"frontmatter":{"title":"webpack系列之三 - 插件的使用"}},"next":{"fields":{"slug":"/20160226-webpack-part-5/"},"frontmatter":{"title":"webpack系列之五－与react框架结合"}}}},"staticQueryHashes":["2841359383"]}