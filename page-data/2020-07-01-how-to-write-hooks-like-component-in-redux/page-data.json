{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-07-01-how-to-write-hooks-like-component-in-redux/","result":{"data":{"site":{"siteMetadata":{"title":"上线前夕"}},"markdownRemark":{"id":"63a83eca-4595-5476-9aad-b6e4dd4f8549","excerpt":"Hooks特性在React的16.8版本被引入，在解决组件重用和生命周期逻辑破碎两大难题的同时，极大简化了组件写法，而且兼容旧写法，即便不想学也没关系，向开发者释放了极大的善意。 可是，组件写法的改变或多或少会让人有些顾虑，尤其是和第三方组件集成，开发社区中也出现了一些类似“Redux是否要被Hooks…","html":"<p>Hooks特性在React的16.8版本被引入，在解决组件重用和生命周期逻辑破碎两大难题的同时，极大简化了组件写法，而且兼容旧写法，即便不想学也没关系，向开发者释放了极大的善意。</p>\n<p>可是，组件写法的改变或多或少会让人有些顾虑，尤其是和第三方组件集成，开发社区中也出现了一些类似“Redux是否要被Hooks取代”的声音，就像之前的React Context特性出现的时候一样，大伙的第一反应总是先问Redux是不是要被取代了，即使两者之间并无太多冲突，不过这也侧面反映了Redux框架在社区中的受众之广。</p>\n<p>实际上，React-Redux组件库作为粘合剂从7.1.0开始已支持Hooks特性，这让我们写redux组件的时候不再需要connect方法，我们通过一个例子来展示如何写Hooks风格的redux组件。下面代码展示了一个复选框，使用了常见的connect方法将组件和store连接起来。</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">import React, { Component } from &quot;react&quot;;\nimport { connect } from &quot;react-redux&quot;;\nimport { toggleSwitch } from &quot;./UiReducer&quot;;\n\nclass Toggle extends Component {\n  render() {\n    const { ui, toggleSwitch } = this.props;\n    return (\n      &lt;div&gt;\n        &lt;div&gt;{JSON.stringify(ui)}&lt;/div&gt;\n        &lt;input\n          type=&quot;checkbox&quot;\n          value={ui.toggle}\n          onChange={toggleSwitch}\n        /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nconst mapStateToProps = ({ ui }) =&gt; ({\n  ui\n});\n\nexport default connect(\n  mapStateToProps,\n  { toggleSwitch }\n)(Toggle);</code>\n        </deckgo-highlight-code>\n      \n<p>最终效果如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/1/1730795a97cf6eff?w=374&#x26;h=202&#x26;f=gif&#x26;s=28977\"></p>\n<p>那么，接下来我们尝试把这个组件重构成hooks风格的redux组件。</p>\n<h4>第一步：重构成函数组件</h4>\n<p>用函数来代替class组件，并且我们将ui和toggleSwitch从组件属性中解构出来，这一步相对简单，代码也得到了极大的缩减。</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { connect } from &quot;react-redux&quot;;\nimport { toggleSwitch } from &quot;./UiReducer&quot;;\n\nconst Toggle = ({ ui, toggleSwitch }) =&gt; (\n  &lt;div&gt;\n    &lt;div&gt;{JSON.stringify(ui)}&lt;/div&gt;\n    &lt;input type=&quot;checkbox&quot; value={ui.toggle} onChange={toggleSwitch} /&gt;\n  &lt;/div&gt;\n);\n\nconst mapStateToProps = ({ ui }) =&gt; ({\n  ui\n});\n\nexport default connect(\n  mapStateToProps,\n  { toggleSwitch }\n)(Toggle);</code>\n        </deckgo-highlight-code>\n      \n<h4>第二步：使用useSelector</h4>\n<p>现在，我们不再使用connect方法，react-redux提供了useSeletor方法让我们可以直接从hook中读取store的值。</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">import { connect, useSelector } from &quot;react-redux&quot;;</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">const Toggle = ({ toggleSwitch }) =&gt; {\n  const ui = useSelector(state =&gt; state.ui);\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{JSON.stringify(ui)}&lt;/div&gt;\n      &lt;input type=&quot;checkbox&quot; value={ui.toggle} onChange={toggleSwitch} /&gt;\n    &lt;/div&gt;\n  );\n};</code>\n        </deckgo-highlight-code>\n      \n<h4>第三步：使用useDispatch</h4>\n<p>像第二步一样，我们可以直接通过hook获取到dispatch方法，然后根据需要执行自定义的action。</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">import { useSelector, useDispatch } from &quot;react-redux&quot;;\n\n...\n\nconst dispatch = useDispatch();</code>\n        </deckgo-highlight-code>\n      \n<h4>完成</h4>\n<p>最终，我们的代码会被重构成下面这样：</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { useSelector, useDispatch } from &quot;react-redux&quot;;\nimport { TOGGLE } from &quot;./UiReducer&quot;;\n\nconst Toggle = () =&gt; {\n  const ui = useSelector(state =&gt; state.ui);\n  const dispatch = useDispatch();\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{JSON.stringify(ui)}&lt;/div&gt;\n      &lt;input\n        type=&quot;checkbox&quot;\n        value={ui.toggle}\n        onChange={() =&gt; dispatch({ type: TOGGLE })}\n      /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Toggle;</code>\n        </deckgo-highlight-code>\n      \n<p>可以看到除了代码的简化外，相比较原connect写法，store中的值不再从组件的属性传入，假如你使用typescript或flow，也省却了属性中对类型的声明，更进一步简化了组件写法，从这个示例中能明显感受到Hooks带来的好处，也许，从现在开始就可以把connect方法扔掉了。</p>\n<blockquote>\n<h4>参考资料</h4>\n</blockquote>\n<blockquote>\n<p><a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks-Intro</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://medium.com/better-programming/how-to-use-redux-with-react-hooks-5422a7ceae6e\">how to use redux with react hooks</a></p>\n</blockquote>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/1/17308d8ff376dd37?w=1702&#x26;h=806&#x26;f=png&#x26;s=162909\"></p>","frontmatter":{"title":"如何编写hooks风格的redux组件","date":"July 01, 2020","description":null,"cover":{"publicURL":"/static/cover-0cee08c545fe77a26abe3c06f523b895.jpeg"}}}},"pageContext":{"slug":"/2020-07-01-how-to-write-hooks-like-component-in-redux/","previous":{"fields":{"slug":"/2020-06-18-how-to-render-big-data-with-list/"},"frontmatter":{"title":"如何顺滑的展示大数据列表"}},"next":null}},"staticQueryHashes":["2841359383"]}