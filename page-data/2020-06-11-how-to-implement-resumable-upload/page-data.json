{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-06-11-how-to-implement-resumable-upload/","result":{"data":{"site":{"siteMetadata":{"title":"Tech blog"}},"markdownRemark":{"id":"f5f9a0c7-4da3-5458-ab26-c114bfb62932","excerpt":"看过一道面试题要求实现断点续传，当时脑海大致想了一下实现思路，没完全想通，感觉涉及的知识点挺多，于是花了些时间用react和nodejs实现了一个简易版，并梳理了实现思路和用到的知识点。 简单汇总，用到的知识点如下： 利用FileReader将上传文件切片 用MD5算法获取文件唯一性标识 用XHR…","html":"<!-- ---\ntitle: ''\n--- -->\n<p>看过一道面试题要求实现断点续传，当时脑海大致想了一下实现思路，没完全想通，感觉涉及的知识点挺多，于是花了些时间用react和nodejs实现了一个简易版，并梳理了实现思路和用到的知识点。</p>\n<p>简单汇总，用到的知识点如下：</p>\n<ol>\n<li>利用FileReader将上传文件切片</li>\n<li>用MD5算法获取文件唯一性标识</li>\n<li>用XHR显示上传进度</li>\n<li>比对文件大小，计算续传的开始节点</li>\n<li>自定制对文件的保存方法，确保异常终止时也能将未传完文件保存下来</li>\n</ol>\n<p><a href=\"https://github.com/twomeetings/resumable-upload-demo\">demo可以在此处下载</a>，另外，推荐使用chrome本身的网络限速来方便的测试断点续传功能。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/11/172a060c655071e1?w=1338&#x26;h=510&#x26;f=png&#x26;s=179173\" alt=\"chrome网络限速\"></p>\n<h3>前端部分</h3>\n<p>框架选择上用了React作前端呈现，利用axois做网络请求，用js-md5来获取文件唯一性标识。</p>\n<h4>先说断点</h4>\n<p>断点的基础是将文件分段，在web端可用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\">FileReader</a>类将文件以Buffer的形式读取，之后用原型链上的slice方法分段处理。</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">const reader = new FileReader()\nreader.readAsArrayBuffer(uploadedFile)</code>\n        </deckgo-highlight-code>\n      \n<p>此外，由于上传文件不通过html表单提交，在js端操作上传就需要使用FormData类来封装上传数据。</p>\n<h4>再说续传</h4>\n<p>续传的前提是需要能识别出再次上传的文件是否与上一次相同，即必须先获取文件唯一性标识，其中MD5算法即可满足要求，因此我使用了第三方依赖js-md5。</p>\n<p>另外，续传开始时需要知道从哪开始续，我在后端提供一个api接口，通过文件md5的值查询对应文件的大小，然后由前端再次上传前调用，并比较计算出续传的开始位置。</p>\n<p>后端的具体实现会在下文提及。</p>\n<h4>上传进度</h4>\n<p>刚开始的时候，我想简单的使用fetch来处理请求，但很快发现fetch本身的设计无法获取上传进度信息，底层实现上只能通过XHR拿到，因此引入了基于XHR的axois来处理上传。</p>\n<h3>后端部分</h3>\n<p>后端使用了koa加formidable组件来处理上传请求，尽管formidable稍显过时，网上更多人推荐multer，我对比了两者，最后决定选用formidable是因为它满足需求且文档详尽。</p>\n<h4>自定义formidable中间件</h4>\n<p>为了能更灵活控制数据处理的部分，我参考了<a href=\"https://github.com/rkusa/koa-formidable/blob/master/index.js\">koa-formidable</a>写法，实现了一个自定义koa中间件。</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">const koaMiddleware = opt =&gt; {\n\tconst tempFileDir = `./upload/tmp/`\n\tif (!fs.existsSync(tempFileDir, { recursive: true })) {\n\t\tfs.mkdirSync(tempFileDir)\n\t}\n\n\treturn async function(ctx, next) {\n\t\tconst form = formidable.IncomingForm()\n\t\tfor (const key in opt) {\n\t\t\tform[key] = opt[key]\n\t\t}\n\t\tawait new Promise((resolve, reject) =&gt; {\n\t\t\tform.parse(ctx.req, (err, fields, files) =&gt; {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err)\n\t\t\t\t} else {\n\t\t\t\t\tctx.request.body = fields\n\t\t\t\t\tctx.request.files = files\n\t\t\t\t\tresolve()\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\n\t\tawait next()\n\t}\n}\n\nexport default koaMiddleware</code>\n        </deckgo-highlight-code>\n      \n<h4>接受分段数据</h4>\n<p>formidable本身提供了一系列事件来处理文件上传操作，比如fileBegin，file，data，aborted，end等等，但这些事件还无法完全满足保存分段数据的一些特殊场景，比如网络中断或异常的情况下，需要将未上传完的文件保存下来，这可能是断点续传功能在实际应用场景的价值所在，应对这种场景则需使用更细化的接收事件onPart。</p>\n<p>在自定义onPart事件中，保存文件的核心方法使用了nodejs中的createWriteStream，使用flags:‘a’来保证没有文件时创建文件，有了文件时则往文件中添加内容。</p>\n<p>另外，在aborted调用end方法，确保网络异常的情况下，已上传的文件内容能被安全保存下来。</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">form.onPart = part =&gt; {\n\tconst tempFilePath = `${tempFileDir}${part.filename}`\n\tconst writer = fs.createWriteStream(tempFilePath, { flags: &#39;a&#39; })\n\tform.on(&#39;aborted&#39;, e =&gt; {\n\t  writer.end()\n\t})\n\n\tform.on(&#39;end&#39;, () =&gt; {\n\t  writer.end()\n\t})\n\n\tpart.on(&#39;data&#39;, buffer =&gt; {\n\t  writer.write(buffer)\n\t})\n}</code>\n        </deckgo-highlight-code>\n      \n<h4>查询当前文件大小</h4>\n<p>上面前端部分提到过，续传前需要知道从哪里开始续传，具体做法就是用已上传的文件大小和整个文件大小做个除法来得知续传的开始点。nodejs中<a href=\"https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_fs_stat_path_options_callback\">fs.statSync</a>方法可以获取当前文件状态，通过size属性拿到当前文件的大小。</p>\n<p>然后将这些通过API开放给前端，使其能在续传前获取相关信息。</p>\n\n        <deckgo-highlight-code language=\"javascript\" >\n          <code slot=\"code\">router.get(&#39;/get-tmp-file-size&#39;, async ctx =&gt; {\n\tconst { name } = ctx.query\n\tconst filePath = `./upload/tmp/${name}`\n\ttry {\n\t\tconst instance = fs.statSync(filePath)\n\t\tctx.body = { size: instance.size }\n\t} catch (err) {\n\t\tctx.body = { size: 0 }\n\t}\n})</code>\n        </deckgo-highlight-code>\n      \n<h3>最后</h3>\n<p>总体而已，在我尝试编写demo的过程中，涉及的知识点渐渐超过了一开始的预期，每个点深挖下去都能牵扯出更多的内容，比如上传取消的功能，demo中我尝试用axois的CancelToken来实现，但使用后发现只能在文件上传前生效，一旦文件开始传输则无法取消，因此当前demo中的取消上传是通过最简单的刷新页面完成的。</p>\n<p>从面试的角度来说，这无疑是一个很好的题目，但假如工作中未接触或留意过上传相关的功能，在时间有限的情况下，其难度也是显而易见，在此祝每个面试中碰到此题的朋友们能有好运气。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/7/1/17308d9b3a7761ec?w=1702&#x26;h=806&#x26;f=png&#x26;s=162909\"></p>","frontmatter":{"title":"web端断点续传的思路和实现","date":"June 11, 2020","description":null}}},"pageContext":{"slug":"/2020-06-11-how-to-implement-resumable-upload/","previous":{"fields":{"slug":"/20170401-redux-part-5/"},"frontmatter":{"title":"Redux系列之五 － 粘合剂react-redux组件（下）"}},"next":null}},"staticQueryHashes":["2841359383","3830567816"]}