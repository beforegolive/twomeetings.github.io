<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Tech blog]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsby-starter-blog-demo.netlify.com</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 27 Mar 2020 08:57:43 GMT</lastBuildDate><item><title><![CDATA[Hello World]]></title><description><![CDATA[hello world]]></description><link>https://gatsby-starter-blog-demo.netlify.com/20200327-helloworld/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/20200327-helloworld/</guid><pubDate>Fri, 27 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;hello world&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[webpack系列之五－与react框架结合]]></title><description><![CDATA[前四篇文章介绍了webpack基本的使用之后，这一篇逐步演示一个webpack结合react的项目，其中只包含react最基本的使用，所以没用过react的不必担心。当然，也可以通过react…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/20160226-webpack-part-5/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/20160226-webpack-part-5/</guid><pubDate>Fri, 26 Feb 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;前四篇文章介绍了webpack基本的使用之后，这一篇逐步演示一个webpack结合react的项目，其中只包含react最基本的使用，所以没用过react的不必担心。当然，也可以通过&lt;a href=&quot;http://twomeetings.github.io/2016/05/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E6%96%87%E6%B1%87%E6%80%BB/&quot;&gt;react系列文章&lt;/a&gt;查看其用法。&lt;/p&gt;
&lt;h3&gt;初始化项目&lt;/h3&gt;
&lt;p&gt;首先，在一个目录下初始化项目，执行以下命令，然后一路回车到底。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;初始化时不要将项目名称命名为模块名，比如react，这样会导致下面的react安装出错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如没有安装过webpack的，需要先将webpack安装到全局环境，可顺便在此处连简易服务器组件webpack-dev-server一起安装，该组件说明可在&lt;a href=&quot;http://twomeetings.github.io/2016/01/05/Webpack%20%E7%B3%BB%E5%88%97%E5%BC%80%E7%AF%87%E4%B8%80/&quot;&gt;系列文章第一篇&lt;/a&gt;找到。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install webpack webpack-dev-server -g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;添加webpack配置文件&lt;/h3&gt;
&lt;p&gt;添加配置文件webpack.config.js,将index.js做为模块入口，且用加载器babel-loader来处理js文件，内容如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;module.exports={
  entry:&amp;#39;./index.js&amp;#39;,
  output:{
    path: __dirname+&amp;#39;/dist&amp;#39;,
    filename: &amp;quot;bundle_[name].js&amp;quot;
  },
  module:{
    loaders:[
      {test: /\.jsx?$/, loader:&amp;quot;babel&amp;quot;}
    ]
  }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;配置文件内各节点的含义可查阅&lt;a href=&quot;http://twomeetings.github.io/2016/01/15/webpack%E7%B3%BB%E5%88%97%E4%BA%8C%20%EF%BC%8D%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/&quot;&gt;系列文章第二篇&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;安装react相关的组件&lt;/h3&gt;
&lt;p&gt;为了让react能运作正常，除了加载器babel-loader，还需要另外两个插件babel-preset-es2015，babel-preset-react，前者用来支持ES6语法，后者则是支持react语法，安装命令如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install babel-loader babel-preset-es2015 babel-preset-react --save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两个语法插件需写在配置文件中才能生效，像这样：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    {test: /\.jsx?$/, loader:&amp;quot;babel&amp;quot;, query : { presets:[&amp;#39;es2015&amp;#39;,&amp;#39;react&amp;#39;]}}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者也可添加一个名为.babelrc的文件，填入以下内容，编译时该文件会被自动加载。两种方法都可，这里我们采用后者。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;presets&amp;quot;:[&amp;quot;es2015&amp;quot;, &amp;quot;react&amp;quot;]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;假如不使用babel-preset-es2015，es6的语法（如import）将无法被识别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在所有准备工作就绪，我们现在执行安装命令引入react，当前版本的react推荐使用react-dom来操作html元素，所以要一并安装&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install react react-dom --save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;编写React代码&lt;/h3&gt;
&lt;p&gt;添加入口文件index.js，编写一个名为HelloWorld的组件，在”id＝react-div”的html元素上呈现一段文字，代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;#39;react&amp;#39;
import ReactDOM from &amp;#39;react-dom&amp;#39;

var HelloWorld=React.createClass({
  render(){
    return(
      &amp;lt;p&amp;gt;Hello World, Hello React. &amp;lt;/p&amp;gt;
    )
  }
})

ReactDOM.render(
  &amp;lt;HelloWorld /&amp;gt;,
  document.getElementById(&amp;#39;react-div&amp;#39;)
)	&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在只需一个包含id为react-div元素的html页面就可以看到最终效果，我们可以手动添加，也可以利用&lt;a href=&quot;http://twomeetings.github.io/2016/01/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89%EF%BC%8Dplugin%E6%8F%92%E4%BB%B6/&quot;&gt;系列文章第三篇&lt;/a&gt;中谈及的模板插件来创建页面。&lt;/p&gt;
&lt;h3&gt;模版插件添加HTML页面&lt;/h3&gt;
&lt;p&gt;安装模版插件html-webpack-plugin，因为其依赖webpack，所以要一并安装，执行命令如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install webpack html-webpack-plugin --save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改配置文件为如下所示：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var HtmlWebpackplugin=require(&amp;#39;html-webpack-plugin&amp;#39;);

module.exports={
  entry:{
    index : &amp;#39;./index.js&amp;#39;
  },
  output:{
    path: __dirname+&amp;#39;/dist&amp;#39;,
    filename: &amp;quot;bundle_[name].js&amp;quot;
  },
  module:{
    loaders:[
      {test: /\.jsx?$/, exclude:/node_modules/, loader:&amp;quot;babel&amp;quot;}
    ]
  },
  plugins:[
    new HtmlWebpackplugin({title:&amp;#39;Index Page&amp;#39;, template:&amp;#39;template.html&amp;#39;, filename:&amp;#39;index.html&amp;#39;, chunks:[&amp;#39;index&amp;#39;]})
  ]
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加模板文件template.html:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;#39;react-div&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行编译命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译成功后，再执行下面命令启动简易服务器。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;webpack-dev-server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，就可以通过浏览器访问服务器默认地址 &lt;a href=&quot;http://localhost:8080/webpack-dev-server/&quot;&gt;http://localhost:8080/webpack-dev-server/&lt;/a&gt; 查看效果。&lt;/p&gt;
&lt;h3&gt;示例代码&lt;/h3&gt;
&lt;p&gt;这样一个webpack和react相结合的项目就搭建完成，假如你按上面步骤操作碰到了问题，可直接到&lt;a href=&quot;https://github.com/twomeetings/webpackAndReact&quot;&gt;这里&lt;/a&gt;下载示例代码。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[webpack系列之四－资源文件的整合]]></title><description><![CDATA[css的提取和合并 在webpack模版插件下，可以对css做提取和合并成一个文件，从而达到优化性能和方便管理的目的。比如我们现在需要index.js文件中引入两个css文件： 提取和合并的工作就需要用到插件‘extract-text-webpack-plugin…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/20160208-webpack-part-4/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/20160208-webpack-part-4/</guid><pubDate>Mon, 08 Feb 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;css的提取和合并&lt;/h3&gt;
&lt;p&gt;在webpack模版插件下，可以对css做提取和合并成一个文件，从而达到优化性能和方便管理的目的。比如我们现在需要index.js文件中引入两个css文件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;require(&amp;#39;./main.css&amp;#39;);
require(&amp;#39;./common.css&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取和合并的工作就需要用到插件‘extract-text-webpack-plugin’，安装代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install extract-text-webpack-plugin --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先在配置文件中该插件，并创建一个实例。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var ExtractTextWebpackPlugin=require(&amp;#39;extract-text-webpack-plugin&amp;#39;);
var extractCss = new ExtractTextWebpackPlugin(&amp;#39;[name].css&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;[name]类似output配置节中的变量，等于对应模块的名称，其他几个变量可在&lt;a href=&quot;https://github.com/webpack/extract-text-webpack-plugin&quot;&gt;对应网站&lt;/a&gt;查询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后，我们需要修改module的loaders配置节中针对css文件的部分，如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{test: /\.css$/, loader: extractCss.extract(&amp;#39;style&amp;#39;,&amp;#39;css&amp;#39;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后在plugins配置节加入这个插件的实例。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;plugins:[
	...,
	extractCss,
	...
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行编译命令：webpack。编译后的文件就多来一个index.css,这个文件的内容合并main.css和common.css的内容。而且模版生成的html页面里，head标签自动加入了css引用的代码，省去了手工处理的麻烦，如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;link href=&amp;quot;index.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如前面提到的，通过这样的处理不但让css文件方便管理之外，还减少了请求次数，提高了性能。&lt;/p&gt;
&lt;p&gt;css和img的抽取&lt;/p&gt;
&lt;h3&gt;图片的提取&lt;/h3&gt;
&lt;p&gt;假如项目中需要用到图片该怎么处理呢？比如现在我们在模版文件用img标签来引入一张图片。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;img src=&amp;quot;./image/what-is-webpack.png&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在在项目下添加img目录，并在其中放入一张图片(what-is-webpack.png)。然后我们在index.js这个入口文件加入引用代码。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import &amp;#39;./imgs/what-is-webpack.png&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们用最基本的文件加载器file-loader处理图片，安装命令如下:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install file-loader --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在配置文件的module字段区域添加如下代码，其中name=[name].[ext]表示编译时命名文件的规则。 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{test: /\.png$/, loader:&amp;#39;file?name=[name].[ext]&amp;#39;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt; [name]和[ext]是其内置的变量，除此之外还有[path]，[hash]等，详细的说明可到&lt;a href=&quot;https://github.com/webpack/file-loader&quot;&gt;对应网站&lt;/a&gt;查询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行webpack命令进行编译，图片就会出现在发布目录下。假如你想把图片放在某个目录下，只要像下面代码，在前面加目录名就行了。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{test: /\.png$/, loader:&amp;#39;file?name=image/[name].[ext]&amp;#39;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;示例代码如下&lt;/h3&gt;
&lt;p&gt;本文代码可在&lt;a href=&quot;https://github.com/twomeetings/webpackPluginExtension&quot;&gt;此处&lt;/a&gt;查看。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[webpack系列之三 - 插件的使用]]></title><description><![CDATA[webpack框架内置了20多种插件，除此之外的开源社区也存在很多优秀的第三方插件，利用这些插件可以轻松扩展webpack到功能，给使用者带来极大的便利。 在web开发中，模版文件基本不可或缺，它抽取出通用部分，为编写代码节省了大量的时间。在webpack…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/20160119-webpack-part-3/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/20160119-webpack-part-3/</guid><pubDate>Tue, 19 Jan 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;webpack框架内置了20多种插件，除此之外的开源社区也存在很多优秀的第三方插件，利用这些插件可以轻松扩展webpack到功能，给使用者带来极大的便利。&lt;/p&gt;
&lt;p&gt;在web开发中，模版文件基本不可或缺，它抽取出通用部分，为编写代码节省了大量的时间。在webpack中也有模版文件的功能，不过它是通过第三方插件来实现的，这个插件叫HtmlWebpackPlugin。可通过下面命令安装：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install html-webpack-plugin --save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们通过这个插件来创建index页面。先在一个目录下初始化项目:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后创建一个模块入口文件index.js。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// add index.js
console.log(&amp;#39;index&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们来创建模版文件template.html。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
    	&amp;lt;h2&amp;gt;&amp;lt;%- htmlWebpackPlugin.options.title %&amp;gt;&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模版文件中有一句表达式&amp;#x3C;%- htmlWebpackPlugin.options.title %&gt;，用来显示某个对象点title属性，这个属性就来自于webpack与HtmlWebpackPlugin插件相关的配置节点。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 创建 webpack.config.js
module.exports={
 entry:&amp;#39;./index.js&amp;#39;,
 output:{
   path: __dirname,
   filename: &amp;quot;bundle_[name].js&amp;quot;
 },
 plugins:[
 	new HtmlWebpackPlugin({title:&amp;#39;Index Page&amp;#39;,template:&amp;#39;template.html&amp;#39;,filename:&amp;#39;index.html&amp;#39;, chunks:[&amp;#39;index&amp;#39;]})
 ]
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到对应的index模块中模版插件的title值为‘Index Page’。&lt;/p&gt;
&lt;p&gt;现在执行编译命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当前目录下生成index.html文件，用浏览器打开如下：&lt;/p&gt;
&lt;h3&gt;添加新的页面&lt;/h3&gt;
&lt;p&gt;在当前模版下，添加页面变的容易许多，比如我们添加的页面叫basic。首先添加模版入口文件basic.js，内容如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;console.log(&amp;#39;basic&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后修改配置文件的entry属性，加入basic模块。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;entry:{
	index: &amp;#39;./index.js&amp;#39;,
	basic: &amp;#39;./basic.js&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后添加一个新的HtmlWebPackPlugin插件给basic模块。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;plugins:[
  	new HtmlWebpackPlugin({title:&amp;#39;Index Page&amp;#39;,template:&amp;#39;template.html&amp;#39;,filename:&amp;#39;index.html&amp;#39;, chunks:[&amp;#39;index&amp;#39;]})
  ],
  	new HtmlWebpackPlugin({title:&amp;#39;Basic Page&amp;#39;,template:&amp;#39;template.html&amp;#39;,filename:&amp;#39;basic.html&amp;#39;, chunks:[&amp;#39;basic&amp;#39;]})
  ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行编译命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样以basic.js为模块的basic.html页面就添加好了。&lt;/p&gt;
&lt;h3&gt;模板变量&lt;/h3&gt;
&lt;p&gt;该模板插件中内置了一些变量，可以通过“&amp;#x3C;%= %&gt;”来引用，当需要对变量中的内容编码时，可以使用“&amp;#x3C;%- %&gt;”。具体的模版属性可以访问&lt;a href=&quot;https://github.com/ampedandwired/html-webpack-plugin&quot;&gt;此处&lt;/a&gt;查看官方说明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模板编译时无法用console.log查看信息，此处通过Object.keys()的方式罗列出所有的属性参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;示例代码&lt;/h3&gt;
&lt;p&gt;本文相关代码可在&lt;a href=&quot;https://github.com/twomeetings/webpackPluginExtension&quot;&gt;此处&lt;/a&gt;查询。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[webpack系列之二 - 配置文件解析]]></title><description><![CDATA[使用配置文件是webpack的基本用法，默认的配置文件名是webpack.config.js，只需把这个文件创建在根目录下，webpack编译时就会自动加载。 在开篇文章里，一个简单示例展示了webpack…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/20160115-webpack-part-2/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/20160115-webpack-part-2/</guid><pubDate>Fri, 15 Jan 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;使用配置文件是webpack的基本用法，默认的配置文件名是webpack.config.js，只需把这个文件创建在根目录下，webpack编译时就会自动加载。&lt;/p&gt;
&lt;p&gt;在开篇文章里，一个简单示例展示了webpack的基本机制和运作方式，例子中的配置文件内容如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;module.exports={
  entry:&amp;#39;./entry.js&amp;#39;,
  output:{
    path: __dirname,
    filename: &amp;quot;bundle.js&amp;quot;
  },
  module:{
    loaders:[
      {test: /\.css$/, loader:&amp;quot;style!css&amp;quot;}
    ]
  }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过这配置文件，webpack将entry.js当作入口文件，无论其内部引用了多少js文件，jquery，angularJS，react等等，最终都会被编译并重命名为一个单独文件bundle.js, 这个单独的文件即被视为模块(在webpack中被称为chunk)。&lt;/p&gt;
&lt;h3&gt;配置字段：entry&lt;/h3&gt;
&lt;p&gt;entry可以接受三种形式的赋值，一个字符串，一个字符串数组或者一个对象。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//字符串
entry:&amp;#39;./entry.js&amp;#39;

//字符串数组
entry:[&amp;#39;./entry1.js&amp;#39;,&amp;#39;./entry2.js&amp;#39;,&amp;#39;./entry3.js&amp;#39;]

//对象
entry:{
	name1:&amp;#39;./entry1.js&amp;#39;,
	name2:&amp;#39;./entry2.js&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它们的区别是，第一种的模块名等于没有后缀的文件名，即entry。第二种会将数组中的文件全部编译到一个文件中，以最后一个文件名来命名模块名。第三种则是根据对象的字段，一个属性名对应一个模块，且属性名为模块名，上面的例子中会生成两个模块name1和name2.&lt;/p&gt;
&lt;h3&gt;配置字段：output&lt;/h3&gt;
&lt;p&gt;output用来决定输出模块的信息，比如目录或者名称。下面的代码将模块文件命名为bundle.js，并放置到当前目录下。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;output:{
    path: __dirname,
    filename: &amp;quot;bundle.js&amp;quot;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;__dirname是nodejs中的常量，表示当前目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此这段代码&lt;/p&gt;
&lt;p&gt;所有模块输出的规则都遵守output中的配置，因此在多模块的情况下，filename为常量会造成一些问题。推荐的做法是使用变量，在output中有几个可以使用的变量来对应相应的信息。比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;hash&lt;/li&gt;
&lt;li&gt;chunkhash&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些变量因其对应的不同模块而不同，使用时需要放到方括号中，如[id].js,[name]_bundle.js,比如下面的示例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;entry:｛
	name1: &amp;#39;./entry1.js&amp;#39;,
	name2: &amp;#39;./entry1.js&amp;#39;
｝,
  output:{
    path: __dirname,
    filename: &amp;quot;[name]_bundle.js&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的配置最终会在当前目录下生成两个模块文件name1&lt;em&gt;bundle.js和name2&lt;/em&gt;bundle.js。
你可以将四个变量都写在一起，用来查看分别代表什么值。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;filename: [id]_[name]_[hash]_[chunkhash].js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除此之外output还有一个较常用的的字段是publicPath,用于指定文件或图片的相对路径，用于网站对访问，有别于path字段，因为后者是本地硬盘的存储路径。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;	output:{
		path:&amp;#39;/home/project/assets/&amp;#39;,
		publicPath:&amp;#39;/assets/&amp;#39;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;img src=&amp;#39;/assets/pic.gif&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在output中，除了path, filename, publicPath这三个常见字段外，还有十多个不常用的字段，在此不细说，可查阅其&lt;a href=&quot;http://www.google.com&quot;&gt;官方网站对应页面&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;配置字段：module&lt;/h3&gt;
&lt;p&gt;module字段最核心的属性就是loaders，利用nodejs庞大的插件库，可以方便的引入专门模块来处理特殊文件，比如例子中对css文件和相应语法的处理。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;module:{
    loaders:[
      {test: /\.css$/, loader:&amp;quot;style!css&amp;quot;}
    ]
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;loaders字段接受一个数组，数组中是包含指定字段的对象。其中test值是正则表达式，用来定位什么样的文件，例中/.css$/代表以.css结尾的文件。&lt;/p&gt;
&lt;p&gt;loader表示加载器，或者叫加载模块。通常这种模块是以loader为后缀，给loader字段赋值时，可以用全名，也可省略后缀。比如style和css的全名是style-loader和css-loader，可用下面的命令来安装：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install css-loader style-loader --save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;loader:‘style!css’表示将css和style两种加载器放到一起处理，多个加载器之间用感叹号隔开是其指定的语法，也可分开书写，便于理解。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{test: /\.css$/ , loaders:[&amp;#39;style&amp;#39;,&amp;#39;css&amp;#39;]}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;分开写在数组中需要把字段loader改成loaders&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除此之外include和exclude也是常用的两个字段，include用来指定目录，exclude用来排除目录。当项目不断变大，模块不断变多时，模块加载器要遍历的文件也越来越多，除了导致编译速度变慢外，有时还会因为加载了不该加载的文件而报错，因此限制文件目录就变的很重要。下面的代码表示只处理app/src目录下的css文件。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{test:/\.css$/, loaders:[&amp;#39;style&amp;#39;,&amp;#39;css&amp;#39;], include:path.resolve(__dirname,&amp;quot;app/src&amp;quot;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;__dirname时nodejs中的变量，表当前目录；path.resolve是nodejs内置的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而exclude最常见的用法是排除node_modules目录，因为该目录包含项目所有的第三份模块，将其排除在外可提高编译速度。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;exclude: /node_modules/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;配置字段：plugins&lt;/h3&gt;
&lt;p&gt;webpack自身提供了一系列的插件来应对不同需求，这些插件按功能分类有30个左右，可在&lt;a href=&quot;http://webpack.github.io&quot;&gt;官网&lt;/a&gt;查询。这里用ProvidePlugin插件将jquery引用为全局变量在所有模块中使用，这样就不必在每个模块都添加引用jquery的代码。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;plugins:[
	new webpack.ProvidePlugin({
		$:&amp;#39;jquery&amp;#39;,
		jQuery:&amp;#39;jquery&amp;#39;
	})
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用webpack插件要记得先在配置文件中引用webpack。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var webpack = require(&amp;#39;webpack&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多的插件相关内容，会在接下来的系列文章详细讲解。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[webpack系列－开篇]]></title><description><![CDATA[为什么要用Webpack？它是什么？ 随着nodejs的迅猛发展，javascript不断进化，且逐渐变成服务器端开发的主流，而在前端领域它能做的事情也越来越多。可是，不断增多的js代码管理起来却让人头疼，模块化是唯一的解决办法，常见的做法是将不同功能的js…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/20160108-webpack-part-1/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/20160108-webpack-part-1/</guid><pubDate>Fri, 08 Jan 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;为什么要用Webpack？它是什么？&lt;/h3&gt;
&lt;p&gt;随着nodejs的迅猛发展，javascript不断进化，且逐渐变成服务器端开发的主流，而在前端领域它能做的事情也越来越多。可是，不断增多的js代码管理起来却让人头疼，模块化是唯一的解决办法，常见的做法是将不同功能的js分割作为单独模块。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script src=&amp;quot;module1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;module2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;module3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但这种做法有几点问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局变量可能冲突&lt;/li&gt;
&lt;li&gt;加载顺序无法保证&lt;/li&gt;
&lt;li&gt;模块之间可能存在依赖&lt;/li&gt;
&lt;li&gt;在大项目里，模块过多难以管理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在nodejs领域，通过CommonJS规范和AMD，这些问题得到了解决。所谓CommonJS，简单来说就是可用关键字require加载模块：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var foo = require(&amp;#39;foo&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种加载方式是同步的，在浏览器常常需异步加载，这时就涉及到了AMD的异步加载方式。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;require([&amp;quot;module&amp;quot;, &amp;quot;../file&amp;quot;], function(module, file) { /* ... */ });

define(&amp;quot;mymodule&amp;quot;, [&amp;quot;dep1&amp;quot;, &amp;quot;dep2&amp;quot;], function(d1, d2) {
  return someExportedValue;
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这解决了异步但不可避免的让代码更难阅读和维护。除此之外，随着ECMAScript6的推行，它也带来自己的模块加载方式，让模块加载这件事变的更加复杂。&lt;/p&gt;
&lt;p&gt;Webpack是一个模块化管理系统，使用它的好处有以下三点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它可以统一模块的加载方式给开发者带来便捷。&lt;/li&gt;
&lt;li&gt;它可以利用已存在的nodejs模块，将其应用到浏览器前端。&lt;/li&gt;
&lt;li&gt;除了javascript，它可以模块化web前端相关的一切元素，图片，css，html等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;用webpack创建项目&lt;/h3&gt;
&lt;p&gt;首先，你需要用nodejs来安装webpack，假如对nodejs不熟悉也没有关系，将其当作是一个安装工具，常用的命令也不过3句。下载nodejs并安装后，在一个文件目录下执行如下命令，用来初始化项目。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后，运行下面命令安装webpack，命令后的-g，表示将其安装为全局模块：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install webpack -g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时可用编辑器（Atom或VsCode）打开该项目，添加以下两个文件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 添加 entry.js
docuemnt.write(&amp;quot;It works&amp;quot;).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 添加 index.html
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;bundle.js&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着执行一下命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;webpack ./entry.js bundle.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时用浏览器打开index.html文件，你能看到”It works”显示在页面上。
&lt;img src=&quot;http://7xtbg7.com2.z0.glb.clouddn.com/webpack1-1&quot;&gt;&lt;/p&gt;
&lt;h3&gt;引用第二个文件&lt;/h3&gt;
&lt;p&gt;接着添加一个content.js文件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 添加 content.js
module.exports= &amp;quot;It works from content.js&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 修改entry.js
document.write(require(&amp;quot;./content.js&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新运行命令&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;webpack ./entry.js bundle.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刷新那个页面你会看到更新的内容：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;It works from content.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第一个加载器(loader)&lt;/h3&gt;
&lt;p&gt;现在添加一个css文件，webpack本身职能处理javascript代码，所以我们需要加载器css-loader来处理css文件，同时我们需要style-loader来处理css文件中的样式。执行命令如下：
&lt;code class=&quot;language-text&quot;&gt;npm install css-loader style-loader --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在做如下操作：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 添加 style.css
body{
	background: yellow;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 更新 entry.js
require(&amp;#39;!style!css!./style.css&amp;#39;);
document.write(require(&amp;#39;./content.js&amp;#39;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新执行命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;webpack ./entry.js bundle.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刷新页面，应该能看到背景色的变化。&lt;/p&gt;
&lt;h3&gt;配置文件&lt;/h3&gt;
&lt;p&gt;现在将上面对例子移动到配置文件中。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 创建 webpack.config.js
module.exports={
  entry:&amp;#39;./entry.js&amp;#39;,
  output:{
    path: __dirname,
    filename: &amp;quot;bundle.js&amp;quot;
  },
  module:{
    loaders:[
      {test: /\.css$/, loader:&amp;quot;style!css&amp;quot;}
    ]
  }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们只要运行命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;webpack会尝试加载当前目录下的webpack.config.js文件，这样就可以完成编译。&lt;/p&gt;
&lt;h3&gt;监控模式&lt;/h3&gt;
&lt;p&gt;如果不想每次更改后都手动执行一下，可以在最开始执行下面的命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;wepack --watch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样webpack会自动监控每一个文件，假如有更新，则会自动重新编译。&lt;/p&gt;
&lt;h3&gt;开发服务器&lt;/h3&gt;
&lt;p&gt;使用开发服务器模块是webpack开发中不可缺少的，它会绑定一个简便服务器到localhost:8080，每次有改动会自动编译，你可以通过浏览器访问localhost:8080/webpack-dev-server/bundle来查看页面，方便调试。
开发服务器的模块名是webpack-dev-server,安装命令如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install webpack-dev-server -g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;记得也要将webpack安装在全局，此后命令行下执行webpack-dev-server即可开启服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;示例代码&lt;/h3&gt;
&lt;p&gt;示例代码可在&lt;a href=&quot;https://github.com/twomeetings/webpackExample&quot;&gt;此处&lt;/a&gt;找到。&lt;/p&gt;
&lt;h3&gt;参考链接&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/nodejs/module.html&quot;&gt;http://javascript.ruanyifeng.com/nodejs/module.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webpack.github.io/docs/motivation.html&quot;&gt;http://webpack.github.io/docs/motivation.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webpack.github.io/docs/tutorials/getting-started/&quot;&gt;http://webpack.github.io/docs/tutorials/getting-started/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>